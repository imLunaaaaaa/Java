package methdo;

public class Method1Ref {
    public static void main(String[] args) {
        // 계산1
        int sum1 = add(5,10);
        System.out.println("결과1 출력: " + sum1);

        // 계산2
        int sum2 = add(15, 20);
        System.out.println("결과2 출력: " + sum2);
    }
    // add 메서드
    public static int add(int a, int b) {
        System.out.println(a + "+" + b + "연산 수행");
        int sum = a + b;
        return sum;
    }
}
// public static int add(int a, int b)   ->  메서드 선언 부분으로 메서드 이름, 반환 타입, 매개변수(파라미터) 목록을 포함한다.
// 이름 그대로 이런 메서드가 있다고 선언하는 것이다. 이 정보를 통해 다른 곳에서 해당 메서드를 호출할 수도 있다.
// public    ->   다른 곳에서 호출할 수 있는 메서드라는 뜻이다.
// static    ->   객체를 생성하지 않고 호출할 수 있는 정적 메서드라는 뜻이다.
// int       ->   반환 타입을 정의한다. 메서드의 실행 결과를 반환할 때 사용할 반환 타입을 지정한다.
// add       ->   메서드에 이름을 부여하다. 이 이름으로 메서드를 호출할 수 있다.
// (int a, int b)     ->    메서드를 호출할 때 전달하는 입력 값을 정의한다. 이 변수들은 해당 메서드 안에서만 사용된다. 이렇게 메서드 선언에 사용되는 변수를 영어로 파라미터, 한글로 매개변수라 한다.


// public static int add(int a, int b) {
//        System.out.println(a + "+" + b + "연산 수행");
//        int sum = a + b;
//        return sum;
// -> 메서드 본문 : 메서드가 수행해야 하는 코드 블록이다. 메서드를 호출하면 메서드 본문이 순서대로 실행된다.
// 본문은 블랙박스이다. 호출하는 곳에서 메서드 선언은 알지만 본문은 모른다.
// 메서드의 실행 결과를 반환하려면 return문을 사용해야 한다. return문 다음에 반환할 결과를 적어주면 된다.  ->   return sum : sum변수에 들어있는 값을 반환한다.


// int sum1 = add(5,10);
// int sum2 = add(15, 20);
// -> 메서드 호출 : 앞서 정의한 메서드를 호출해서 실행하려면 메서드 입력 값을 전달하면 된다.


// 메서드 호출 시 실행 순서
// int sum1 = add(5,10);    ->  add라는 메서드를 숫자 5, 10을 전달하면서 호출한다.
// int sum1 = 15;           ->  add(5, 10)이 실행된다. 반환 값은 15이고, sum1에 15값이 저장된다.
// 메서드를 호출하면 메서드는 계산을 끝내고 결과를 반환한다. 호출이 끝나면 더 이상 해당 메서드가 사용한 메모리를 낭비할 이유가 없다.
// 따라서 호출이 끝나면 파라미터 변수인 int a, int b, int sum도 모두 제거된다.


// 메서드 호출과 용어정리
// 메서드 호출 시 메서드에 넘기는 값과 파라미터의 타입이 맞아야 한다. 갯수도 맞아야 한다.
// 호출 : call("hello", 20)
// 메서드 정의 : int call(String str, int age)   ->  첫 번째가 스트링, 두 번째가 숫자로 타입이 동일함

// 인수(아규먼트)
// "hello", 20처럼 넘기는 값을 인수=인자, 영어로 Argument(아규먼트)라 한다. 실무에서 인수, 인자, 아규먼트 용어 모두 사용한다.

// 매개변수(파라미터)
// 메서드 정의할 때 선언한 변수인 String str, int age를 매개변수, 파라미터라 한다. 메서드를 호출할 때 인수를 넘기면 그 인수가 매개변수에 대입된다. 실수에서 매개변수, 파라미터 용어 모두 사용한다.


// 메서드 정의
// public static int add(int a, int b) {
// 메서드 본문, 실행코드
// }
// 제어자 반환타입 메서드이름(매개변수 목록) {
// 메서드 본문
//}
// -> 제어자 : public, static과 같은 부분이다.
// -> 반환 타입 : 메서드가 실행된 후 반환하는 데이터 타입을 지정한다. 값을 반환하지 않는 경우 없다는 뜻의 void를 사용해야 한다. ex) void print(String str)
// -> 메서드 이름 : 이 이름은 메서드를 호출하는 데 사용한다.
// -> 매개변수 : 입력 값으로, 메서드 내부에서 사용할 수 있는 변수이다. 매개변수는 옵션이다. 입력값이 필요 없는 메서드는 매개변수를 지정하지 않아도 된다. ex) add()
// -> 메서드 본문 : 실제 메서드의 코드가 위차한다. {} 사이에 코드를 작성한다.