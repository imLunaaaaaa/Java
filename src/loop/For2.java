package loop;

public class For2 {
    public static void main(String[] args) {
        int sum = 0;
        int endNum = 3;


        for (int i = 1; i <= endNum; i++) {
            sum = sum + i;
            System.out.println("i=" + i + " sum=" + sum );

            // 1. 초기식 실행 int i = 1
            // 2. 조건식 검증 i <= 10
            // 3. 조건식이 참이면 코드 실행 System.out.println(i);
            // 4. 코드 종료되면 증감식 실행 i++
            // 5. 다시 2. 조건식 검증. 무한반복 이후 i <= 10 조건이 거짓이 되면 for문을 빠져나간다.
        }
    }
}

// for문도 while문과 같은 반복문이며, 코드를 반복 실행한다. for문은 주로 반복 횟수가 정해져 있을 때 사용한다.
// for문 실행 순서 1. 초기식 실행 (주로 반복 횟수와 관련된 변수를 선언하고 초기화 할 때 사용되며 딱 1번 사용된다.)
// 2. 조건식 검증 (참이면 코드실행, 거지시면 for문을 빠져나간다.)
// 3. 코드 실행
// 4. 코드 종료되면 증감식 실행 ( 주로 초기식에 넣은 반복 횟수와 관련된 변수의 값을 증가할 때 사용한다.)
// 5. 다시 2. 조건식부터 시작한다. (무한반복)
// for vs while을 비교했을 때, for문이 더 깔끔하다. 초기화, 조건 검사, 반복 후 작업 등이 한 줄에 있다. while문을 좀 더 편하게 다룰 수 있도록 구조화한 것
// 특히 반복을 위해 값이 증가하는 카운터 변수를 다른 부분과 명확하게 구분할 수 있다.
// => 따라서 for문 없이 while문으로 모든 반복을 다룰 수 있다. 하지만 카운터 변수가 명확하거나, 반복횟수가 정해진 경우 for문을 사용하는 것이 구조적으로 더 깔끔하고, 유지보수하기 좋다.

// for (초기식; 조건식; 증감식;) {코드} -> for문 구조
// 초기식 조건식 증감식은 선택이다. 대신 생략하려면 각 영역을 구분하기 위한 세미콜론은 유지해야 한다.
// for (;;) {코드}  -> 조건이 없어서 무한반복하게 됨 (= while (true) {코드} 와 같은 코드가 됨)
